from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from bot.dao.dao import UserDAO
from bot.user.kbs import main_user_kb, payments_kb, user_services_kb
from bot.user.schemas import TelegramIDModel, UserModel


user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )

    if user_info:
        return await message.answer(
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=main_user_kb(user_id)
        )

    values = UserModel(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await UserDAO.add(session=session_with_commit, values=values)
    await message.answer(
        '<b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!</b>. '
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=main_user_kb(user_id)
    )


@user_router.callback_query(F.data == 'home')
async def page_home(call: CallbackQuery):
    await call.answer('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    return await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=main_user_kb(call.from_user.id)
    )


@user_router.callback_query(F.data == 'about')
async def page_about(call: CallbackQuery):
    await call.answer('–û —Å–µ—Ä–≤–∏—Å–∞—Ö')
    await call.message.answer(
        text=(
            '*–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ: *\n\n'
            'üöó –ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π VIN\n\n'
            'üõû –£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∞—Å–Ω–æ–π —á–∞—Å—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É\n\n'
            '‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¢–û\n\n'
            'ü§ñ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏–∏\n\n'
            'üì© –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É\n\n'
            '_–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å, '
            '–ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥._\n'
        ),
        parse_mode='Markdown',
        reply_markup=call.message.reply_markup
    )


@user_router.callback_query(F.data == 'my_profile')
async def page_user_profile(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ü—Ä–æ—Ñ–∏–ª—å')

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await UserDAO.get_purchased_services(
            session=session_without_commit,
            telegram_id=call.from_user.id
            )
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
    if len(payments) == 0:
        await call.message.answer(
            text='üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.</b>\n\n'
                 '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
            reply_markup=main_user_kb(call.from_user.id)
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
        services = [payment.service for payment in payments]
        await call.message.edit_text(
            text='–í–∞—à–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:',
            reply_markup=user_services_kb(services)
        )


@user_router.callback_query(F.data == 'payments')
async def page_user_payments(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ú–æ–∏ –æ–ø–ª–∞—Ç—ã')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    payments = await UserDAO.get_purchased_services(
        session=session_without_commit,
        telegram_id=call.from_user.id
        )
    payments_statistic = await UserDAO.get_purchase_statistics(
        session=session_without_commit,
        telegram_id=call.from_user.id
        )
    total_amount = payments_statistic.get('total_amount', 0)
    total_payments = payments_statistic.get('count_payments', 0)

    if not payments:
        await call.message.edit_text(
            text='üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.</b>\n\n'
                 '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–∏—Å!',
            reply_markup=main_user_kb(call.from_user.id)
        )
        return
    statistic_text = (
            f'üöó  <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: <b>{total_payments}</b>\n'
            f'–û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount}‚ÇΩ</b>\n\n'
        )
    await call.message.answer(text=statistic_text)
    await call.message.answer(
        text='–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∏–ª–∏ –≤—ã—Ö–æ–¥–∞, '
        '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=payments_kb()
    )


@user_router.callback_query(F.data == 'payments_details')
async def page_user_payments_details(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç:')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    payments = await UserDAO.get_purchased_services(
        session=session_without_commit,
        telegram_id=call.from_user.id
        )
    # –î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    for payment in payments:
        service = payment.service

        service_text = (
            f'üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö:</b>\n'
            f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
            f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{service.name}</i>\n'
            f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{service.description}</i>\n'
            f'<b>–¶–µ–Ω–∞:</b> <b>{service.price} ‚ÇΩ</b>\n'
            f' <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:</b>\n<i>'
            f'{payment.expire.strftime("%Y-%m-%d-%H:%M:%S")}</i>\n'
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
        await call.message.answer(text=service_text)

    await call.message.answer(
        text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=main_user_kb(call.from_user.id)
    )
