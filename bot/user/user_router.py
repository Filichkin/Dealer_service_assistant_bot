from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession

from bot.dao.dao import UserDAO
from bot.user.kbs import main_user_kb, payments_kb
from bot.user.schemas import TelegramIDModel, UserModel


user_router = Router()


@user_router.message(CommandStart())
async def cmd_start(message: Message, session_with_commit: AsyncSession):
    user_id = message.from_user.id
    user_info = await UserDAO.find_one_or_none(
        session=session_with_commit,
        filters=TelegramIDModel(telegram_id=user_id)
    )

    if user_info:
        return await message.answer(
            f'üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! '
            f'–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
            reply_markup=main_user_kb(user_id)
        )

    values = UserModel(
        telegram_id=user_id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    await UserDAO.add(session=session_with_commit, values=values)
    await message.answer(
        'üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>. '
        '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=main_user_kb(user_id)
    )


@user_router.callback_query(F.data == 'home')
async def page_home(call: CallbackQuery):
    await call.answer('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞')
    return await call.message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        reply_markup=main_user_kb(call.from_user.id)
    )


@user_router.callback_query(F.data == 'about')
async def page_about(call: CallbackQuery):
    await call.answer('–û —Å–µ—Ä–≤–∏—Å–∞—Ö')
    await call.message.answer(
        text=(
            'üöó –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π VIN\n\n'
            'üõû –£–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.\n\n'
            '‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¢–û.\n\n'
            'üë®‚Äçüîß –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å  –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º\n'
        ),
        reply_markup=call.message.reply_markup
    )


@user_router.callback_query(F.data == 'my_profile')
async def page_about(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ü—Ä–æ—Ñ–∏–ª—å')

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = await UserDAO.get_purchase_statistics(
        session=session_without_commit,
        telegram_id=call.from_user.id
        )
    total_amount = payments.get('total_amount', 0)
    total_payments = payments.get('count_payments', 0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–∫—É–ø–æ–∫
    if total_payments == 0:
        await call.message.answer(
            text='üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—Ç.</b>\n\n'
                 '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
            reply_markup=main_user_kb(call.from_user.id)
        )
    else:
        text = (
            f'üöó  <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n'
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: <b>{total_payments}</b>\n'
            f'–û–±—â–∞—è —Å—É–º–º–∞: <b>{total_amount}‚ÇΩ</b>\n\n'
            '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–∏—Ö –æ–ø–ª–∞—Ç?'
        )
        await call.message.answer(
            text=text,
            reply_markup=payments_kb()
        )


@user_router.callback_query(F.data == 'payments')
async def page_user_payments(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ú–æ–∏ –æ–ø–ª–∞—Ç—ã')

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    payments = await UserDAO.get_purchased_services(
        session=session_without_commit,
        telegram_id=call.from_user.id
        )

    if not payments:
        await call.message.edit_text(
            text='üîç <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—Ç.</b>\n\n'
                 '–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å!',
            reply_markup=main_user_kb(call.from_user.id)
        )
        return

    # –î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    for payment in payments:
        service = payment.product

        service_text = (
            f'üõí <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ:</b>\n'
            f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
            f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{service.name}</i>\n'
            f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{service.description}</i>\n'
            f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{service.price} ‚ÇΩ</b>\n'
            f'üîπ <b>–ó–∞–∫—Ä—ã—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{service.hidden_content}</i>\n'
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        )
        await call.message.answer(text=service_text)

    await call.message.answer(
        text='üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!',
        reply_markup=main_user_kb(call.from_user.id)
    )
