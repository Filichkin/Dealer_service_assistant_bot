import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession

from bot.admin.kbs import (
    admin_kb,
    admin_kb_back,
    service_management_kb,
    cancel_kb_inline,
    admin_confirm_kb,
    dell_service_kb
)
from bot.admin.schemas import ServiceModel, ServiceIDModel
from bot.admin.utils import process_dell_text_msg
from bot.config import settings, bot
from bot.dao.dao import PaymentDao, ServiceDao, UserDAO
from bot.utils.parts_update_data import update_parts_data


admin_router = Router()


class AddService(StatesGroup):
    name = State()
    description = State()
    price = State()
    hidden_content = State()
    confirm_add = State()


@admin_router.message(
        Command(commands=['update'])
    )
async def cmd_update(message: Message, session_with_commit: AsyncSession):
    await update_parts_data(session_with_commit)


@admin_router.callback_query(
        F.data == 'admin_panel',
        F.from_user.id.in_(settings.ADMIN_IDS)
    )
async def start_admin(call: CallbackQuery):
    await call.answer('–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!')
    await call.message.edit_text(
        text='–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. '
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
        reply_markup=admin_kb()
    )


@admin_router.callback_query(
        F.data == 'statistic',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_statistic(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    await call.answer('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')

    stats = await UserDAO.get_statistics(session=session_without_commit)
    total_summ = await PaymentDao.get_full_summ(session=session_without_commit)
    stats_message = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
        f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n"
        f"üìÜ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['new_month']}\n\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_summ} —Ä—É–±.\n\n"
        "üïí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç."
    )
    await call.message.edit_text(
        text=stats_message,
        reply_markup=admin_kb()
    )


@admin_router.callback_query(
        F.data == 'cancel',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_process_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞')
    await call.message.delete()
    await call.message.answer(
        text='–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.',
        reply_markup=admin_kb_back()
    )


@admin_router.callback_query(
        F.data == 'delete_service',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_process_start_dell(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤')
    all_services = await ServiceDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text=f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(all_services)} —Å–µ—Ä–≤–∏—Å–æ–≤. '
        f'–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
    )
    for service_data in all_services:

        service_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≤–∏—Å–∞:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> '
                        f'<b>{service_data.name}</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>'
                        f'{service_data.description}</b>\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{service_data.price} ‚ÇΩ</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–∫—Ä—ã—Ç–æ–µ):</b>\n\n<b>'
                        f'{service_data.hidden_content}</b>\n\n'
                        )
        await call.message.answer(
            text=service_text,
            reply_markup=dell_service_kb(service_data.id)
            )


@admin_router.callback_query(
        F.data.startswith('dell_'),
        F.from_user.id.in_(settings.ADMIN_IDS)
    )
async def admin_process_start_dell(
    call: CallbackQuery,
    session_with_commit: AsyncSession
):
    service_id = int(call.data.split('_')[-1])
    await ServiceDao.delete(
        session=session_with_commit,
        filters=ServiceIDModel(id=service_id)
        )
    await call.answer(f'–¢–æ–≤–∞—Ä —Å ID {service_id} —É–¥–∞–ª–µ–Ω!', show_alert=True)
    await asyncio.sleep(1.5)
    await call.message.delete()


@admin_router.callback_query(
        F.data == 'process_services',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_process_services(
    call: CallbackQuery,
    session_without_commit: AsyncSession
):
    await call.answer('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏')
    all_services_count = await ServiceDao.count(session=session_without_commit)
    await call.message.edit_text(
        text=f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {all_services_count} —Å–µ—Ä–≤–∏—Å–æ–≤.',
        reply_markup=service_management_kb()
    )


@admin_router.callback_query(
        F.data == 'add_service',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_process_add_service(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.')
    await call.message.delete()
    msg = await call.message.answer(
        text='–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ',
        reply_markup=cancel_kb_inline()
        )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddService.name)


@admin_router.message(
        F.text,
        F.from_user.id.in_(settings.ADMIN_IDS),
        AddService.name
    )
async def admin_process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(
        text='–î–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ',
        reply_markup=cancel_kb_inline()
        )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddService.description)


@admin_router.message(
        F.text,
        F.from_user.id.in_(settings.ADMIN_IDS),
        AddService.description
        )
async def admin_process_description(
    message: Message,
    state: FSMContext,
):
    await state.update_data(description=message.html_text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(
        text='–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞: ',
        reply_markup=cancel_kb_inline()
        )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddService.price)


@admin_router.message(
        F.text,
        F.from_user.id.in_(settings.ADMIN_IDS),
        AddService.price
    )
async def admin_process_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        await process_dell_text_msg(message, state)
        msg = await message.answer(
            text='–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç, '
                 '–∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä–≤–∏—Å–∞',
            reply_markup=cancel_kb_inline()
        )
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(AddService.hidden_content)
    except ValueError:
        await message.answer(
            text='–û—à–∏–±–∫–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã.'
            )
        return


@admin_router.message(
        F.text,
        F.from_user.id.in_(settings.ADMIN_IDS),
        AddService.hidden_content
        )
async def admin_process_hidden_content(
    message: Message,
    state: FSMContext
):
    await state.update_data(hidden_content=message.html_text)

    service_data = await state.get_data()

    service_text = (f'üõí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n'
                    f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞:</b> <b>'
                    f'{service_data["name"]}</b>\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>'
                    f'{service_data["description"]}</b>\n\n'
                    f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{service_data["price"]} ‚ÇΩ</b>\n'
                    f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–∫—Ä—ã—Ç–æ–µ):</b>\n\n<b>'
                    f'{service_data["hidden_content"]}</b>\n\n'
                    )
    await process_dell_text_msg(message, state)

    msg = await message.answer(
        text=service_text,
        reply_markup=admin_confirm_kb()
        )
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(AddService.confirm_add)


@admin_router.callback_query(
        F.data == 'confirm_add',
        F.from_user.id.in_(settings.ADMIN_IDS)
        )
async def admin_process_confirm_add(
    call: CallbackQuery, state: FSMContext,
    session_with_commit: AsyncSession
):
    await call.answer('–ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ñ–∞–π–ª–∞!')
    service_data = await state.get_data()
    await bot.delete_message(
        chat_id=call.from_user.id,
        message_id=service_data['last_msg_id']
        )
    del service_data['last_msg_id']
    await ServiceDao.add(
        session=session_with_commit,
        values=ServiceModel(**service_data)
        )
    await call.message.answer(
        text='–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!',
        reply_markup=admin_kb()
        )
